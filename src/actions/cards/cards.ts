"use server";

import { getCurrentUser } from "@/lib/auth";
import { User } from "@/mongo/models/User";
import { connectDB } from "@/mongo/mongoose";
import Stripe from "stripe";

// —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —é–∑–µ—Ä–∞

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!);

export async function addCardToUser(
    paymentMethodId: string
): Promise<{ success: boolean; message: string }> {
    await connectDB();

    const sessionUser = await getCurrentUser();
    if (!sessionUser) return { success: false, message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω" };
    const user = await User.findById(sessionUser.userId);

    if (!user || !user.stripeCustomerId) {
        return { success: false, message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç stripeCustomerId" };
    }

    // üëâ –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É –∫ Customer
    await stripe.paymentMethods.attach(paymentMethodId, {
        customer: user.stripeCustomerId,
    });

    // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—É –≤ MongoDB (–µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞)
    if (!user.savedCards.includes(paymentMethodId)) {
        user.savedCards.push(paymentMethodId);
        await user.save();
    }

    return { success: true, message: "–ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞" };
}
